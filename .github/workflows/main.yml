name: vprofile actions
on: workflow_dispatch
env:
  #credentials for deployment to GCP
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  PROJECT_ID: gitops-414615
  GCP_REGION: us-central1
  GKE_CLUSTER: vprofile-gke
  APP_NAME: latest-25

jobs:
  Testing:
    runs-on:  ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      # Setup java 11 to be default
      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Setup sonar-scanner
      - name: Setup Sonarqube
        uses: warchant/setup-sonar-scanner@v7

      # Run Sonar Scanner
      - name: SonarQube Scan
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath=target/surefire-reports/ 
           -Dsonar.jacoco.reportsPath=target/jacoco.exec 
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

      # Check quality gate
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on:  ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Build and publish image to GCR
        uses: RafikFarhad/push-to-gcr-github-action@v5-rc1
        with:
          # gcloud_service_key: ${{ secrets.GCLOUD_SERVICE_KEY }} # can be base64 encoded or plain text || not needed if you use google-github-actions/auth
          registry: gcr.io
          project_id: ${{ env.PROJECT_ID }}
          image_name: latest-${{ github.run_number }}
          image_tag: latest,${{ github.run_number }}
          gcloud_service_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          dockerfile: ./Dockerfile
          context: ./

  DeployToGKE:
    needs: BUILD_AND_PUBLISH
    runs-on:  ubuntu-latest
    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Get Kube config file
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GCP_REGION }}

      - name: Install gke auth plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Login to GKE
        run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=GKE  --docker-password=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Deploy Helm
        uses: jmagnusson/deploy-helm-gke-action@v1
        with:
          docker-image-repo: gcr.io/${{ secrets.GKE_PROJECT }}/${{ env.APP_NAME }}
          docker-image-tag: ${{ github.sha }}
          helm-release-name: ${{ env.APP_NAME }}
          helm-chart-path: helm/vprofilecharts
          helm-vars-folder: helm/vprofilecharts
          gke-project: ${{ env.PROJECT_ID }}
          gke-cluster: ${{ env.GKE_CLUSTER }}
          gke-zone: ${{ env.GCP_REGION }}
          gke-sa-key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}